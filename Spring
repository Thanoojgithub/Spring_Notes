1. Are Spring Beans Thread Safe ?


No.

Spring has different bean scopes (e.g. Prototype, Singleton, Request, Session, etc.). "singleton" scoped bean will be created once and shared within the application context. "prototype" will create a new instance for any call context.getBean("beanID").

These above scopes are nothing to do with being thread safe, since if several threads have access to a bean (no matter the scope), it would only depend on the design of that bean to be or not to be "thread safe".

If you are concerned whether 2 or more HTTP requests may creae a problem for the same bean, there is a "request" scope that will create a new instance of a bean for each HTTP request, hence you can "think" of a particular bean as being "safe" in the context of multiple HTTP requests. But it is still not truly thread safe by Spring since if several threads use this bean within the same HTTP request, it goes back to a bean design (your design of a bean backing class).

How to Make/Design a Thread Safe "Spring bean" ?

Ways ::

Design your beans as immutable: for example have no setters and only use constructor arguments to create a bean. There are other ways, such as Builder pattern, etc..

Here, is the clue where exactly prefering constructor based DI then setter based DI, which help us in designing bean immutability.

Design your beans as stateless: for example a bean that does something can be just a function (or several). This bean in most cases can and should be stateless, which means it does not have any state, it only does things with function arguments you provide each time (on each invocation)

Here, use synchonized method or block to maintain critical logic, and make sure variables inside method which are in part of critica logic, should be local.
